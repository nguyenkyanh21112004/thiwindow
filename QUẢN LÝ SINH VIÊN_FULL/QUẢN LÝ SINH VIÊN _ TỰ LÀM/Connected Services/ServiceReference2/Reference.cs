//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QUẢN_LÝ_SINH_VIÊN___TỰ_LÀM.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IThaotacCSDL")]
    public interface IThaotacCSDL {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThaotacCSDL/Insert", ReplyAction="http://tempuri.org/IThaotacCSDL/InsertResponse")]
        void Insert(DTO.Lop lop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThaotacCSDL/Insert", ReplyAction="http://tempuri.org/IThaotacCSDL/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(DTO.Lop lop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThaotacCSDL/Update", ReplyAction="http://tempuri.org/IThaotacCSDL/UpdateResponse")]
        void Update(DTO.Lop lop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThaotacCSDL/Update", ReplyAction="http://tempuri.org/IThaotacCSDL/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(DTO.Lop lop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThaotacCSDL/Delete", ReplyAction="http://tempuri.org/IThaotacCSDL/DeleteResponse")]
        void Delete(DTO.Lop lop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThaotacCSDL/Delete", ReplyAction="http://tempuri.org/IThaotacCSDL/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(DTO.Lop lop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThaotacCSDL/Load", ReplyAction="http://tempuri.org/IThaotacCSDL/LoadResponse")]
        DTO.Lop[] Load();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThaotacCSDL/Load", ReplyAction="http://tempuri.org/IThaotacCSDL/LoadResponse")]
        System.Threading.Tasks.Task<DTO.Lop[]> LoadAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IThaotacCSDLChannel : QUẢN_LÝ_SINH_VIÊN___TỰ_LÀM.ServiceReference2.IThaotacCSDL, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ThaotacCSDLClient : System.ServiceModel.ClientBase<QUẢN_LÝ_SINH_VIÊN___TỰ_LÀM.ServiceReference2.IThaotacCSDL>, QUẢN_LÝ_SINH_VIÊN___TỰ_LÀM.ServiceReference2.IThaotacCSDL {
        
        public ThaotacCSDLClient() {
        }
        
        public ThaotacCSDLClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ThaotacCSDLClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ThaotacCSDLClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ThaotacCSDLClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Insert(DTO.Lop lop) {
            base.Channel.Insert(lop);
        }
        
        public System.Threading.Tasks.Task InsertAsync(DTO.Lop lop) {
            return base.Channel.InsertAsync(lop);
        }
        
        public void Update(DTO.Lop lop) {
            base.Channel.Update(lop);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(DTO.Lop lop) {
            return base.Channel.UpdateAsync(lop);
        }
        
        public void Delete(DTO.Lop lop) {
            base.Channel.Delete(lop);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(DTO.Lop lop) {
            return base.Channel.DeleteAsync(lop);
        }
        
        public DTO.Lop[] Load() {
            return base.Channel.Load();
        }
        
        public System.Threading.Tasks.Task<DTO.Lop[]> LoadAsync() {
            return base.Channel.LoadAsync();
        }
    }
}
